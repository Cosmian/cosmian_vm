---
# tasks file for ansible/roles/kms

- name: Check OS distribution
  ansible.builtin.debug:
    var: ansible_distribution

- name: Find all authorized_keys files
  ansible.builtin.find:
    paths:
      - /home
      - /root
    recurse: true
    patterns: authorized_keys
  register: authorized_keys

- name: Display authorized_keys
  ansible.builtin.debug:
    var: authorized_keys

- name: Remove found authorized_keys files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ authorized_keys.files }}"
  when: authorized_keys.matched > 0

- name: Find all authorized_keys files
  ansible.builtin.find:
    paths:
      - /home
      - /root
    recurse: true
    patterns: authorized_keys
  register: authorized_keys

- name: Display authorized_keys authorized_keys
  ansible.builtin.debug:
    var: authorized_keys

- name: Find immediate subdirectories in /home
  ansible.builtin.find:
    paths: /home
    file_type: directory
    recurse: false
  register: home_subdirs

- name: Display usernames with home directories
  ansible.legacy.debug:
    var: users_with_home_dirs

- name: Extract usernames from home directories
  ansible.builtin.set_fact:
    users_with_home_dirs: "{{ home_subdirs.files | map(attribute='path') | map('basename') | list }}"

- name: Display usernames with home directories
  ansible.legacy.debug:
    var: users_with_home_dirs

- name: Remove non-essential users
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: true
    force: true
  with_items: "{{ users_with_home_dirs }}"

- name: Check immediate subdirectories in /home
  ansible.builtin.find:
    paths: /home
    file_type: directory
    recurse: false
  register: home_subdirs
  changed_when: home_subdirs != 0

- name: Display usernames with home directories
  ansible.legacy.debug:
    var: users_with_home_dirs
