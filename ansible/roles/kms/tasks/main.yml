---
# tasks file for ansible/roles/kms

- name: Check OS distribution
  ansible.builtin.debug:
    var: ansible_distribution

- name: Check OS version
  ansible.builtin.debug:
    var: ansible_distribution_version

- name: Check Cosmian KMS version
  ansible.builtin.debug:
    var: cosmian_kms_version

- name: Check Cosmian KMS package version
  ansible.builtin.debug:
    var: kms_package_version

- name: Check FIPS
  ansible.builtin.debug:
    var: kms_fips

- name: Install prerequisites packages
  ansible.builtin.package:
    name:
      - nginx
      - redis
    state: present
    update_cache: true
  when: not kms_fips

- name: Install prerequisites packages (FIPS mode)
  ansible.builtin.package:
    name:
      - nginx
    state: present
    update_cache: true
  when: kms_fips

- name: Install Cosmian VM via RPM package
  when: ansible_distribution == 'RedHat'
  block:
    - name: Declare package name
      ansible.builtin.set_fact:
        kms_package_name: cosmian_kms_server-{{ kms_package_version }}-1.x86_64.rpm

    - name: Download RPM Cosmian KMS Server package from package.cosmian.com
      ansible.builtin.get_url:
        url: https://package.cosmian.com/kms/{{ cosmian_kms_version }}/rockylinux9/{{ kms_package_name }}
        dest: /tmp
        mode: "0755"
        group: root
        owner: root

    - name: Install Cosmian KMS Server RPM package from package.cosmian.com
      ansible.builtin.dnf:
        name: /tmp/{{ kms_package_name }}
        state: present
        disable_gpg_check: true
      tags: install_rpm

- name: Install Cosmian KMS Server via Debian package
  when: ansible_distribution == 'Ubuntu'
  tags: install_deb
  block:
    - name: Declare package name
      ansible.builtin.set_fact:
        kms_package_name: cosmian-kms-server{{ kms_fips }}_{{ kms_package_version }}-1_amd64.deb

    - name: Download Debian package from package.cosmian.com
      ansible.builtin.get_url:
        url: https://package.cosmian.com/kms/{{ cosmian_kms_version }}/ubuntu-{{ ansible_distribution_version }}/{{ kms_package_name }}
        dest: /tmp
        mode: "0755"
        group: root
        owner: root

    - name: Install Cosmian KMS Debian package
      ansible.builtin.apt:
        deb: /tmp/{{ kms_package_name }}

- name: Override Cosmian KMS systemd service
  ansible.builtin.template:
    src: cosmian_kms.service.j2
    dest: /etc/systemd/system/cosmian_kms.service
    owner: root
    group: root
    mode: "0644"

- name: Override Cosmian VM configuration
  ansible.builtin.template:
    src: agent.toml.j2
    dest: /etc/cosmian_vm/agent.toml
    owner: root
    group: root
    mode: "0644"

- name: Create the directory /var/lib/cosmian_vm/data/app if it does not exist
  ansible.builtin.file:
    path: /var/lib/cosmian_vm/data/app
    state: directory
    owner: root
    group: root
    mode: "0644"

- name: Create default Cosmian KMS configuration
  ansible.builtin.template:
    src: kms.toml.j2
    dest: /var/lib/cosmian_vm/data/app/app.conf
    owner: root
    group: root
    mode: "0644"
  when: not kms_fips

- name: Create FIPS-compliant Cosmian KMS configuration
  ansible.builtin.template:
    src: kms-fips.toml.j2
    dest: /var/lib/cosmian_vm/data/app/app.conf
    owner: root
    group: root
    mode: "0644"
  when: kms_fips

- name: Create the directory /var/www/html if it does not exist
  ansible.builtin.file:
    path: /var/www/html
    state: directory
    owner: root
    group: root
    mode: "0644"

- name: Selinux - add nginx to permissive allow httpd
  when: ansible_distribution == 'RedHat'
  ansible.builtin.command: semanage permissive -a httpd_t
  register: kms_cmd_output
  changed_when: kms_cmd_output.rc != 0
  tags: selinux

- name: Add SELinux context for KMS
  when: ansible_distribution == 'RedHat'
  ansible.builtin.shell: |
    set -exo pipefail
    semanage fcontext -a -t cosmiand_exec_t /usr/sbin/cosmian_kms
    restorecon -v /usr/sbin/cosmian_kms
    semanage fcontext -a -t cosmiand_conf_t /etc/cosmian/kms.toml
    restorecon -v /etc/cosmian/kms.toml
  args:
    executable: /bin/bash
  become: true
  changed_when: true

- name: Add Nginx configuration
  ansible.builtin.template:
    src: nginx.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: "0644"

- name: Enable systemd Nginx service
  ansible.builtin.systemd_service:
    name: nginx
    enabled: true
    state: stopped
    daemon_reload: true

- name: Make systemd Nginx restarting on failure
  ansible.builtin.blockinfile:
    path: /etc/systemd/system/multi-user.target.wants/nginx.service
    block: |
      [Service]
      Restart=on-failure
      RestartSec=10s
  tags: systemd_nginx

- name: Install Redis on Ubuntu
  when: ansible_distribution == 'Ubuntu'
  block:
    - name: Install required packages
      ansible.builtin.apt:
        name: 'lsb-release'
        state: present
        update_cache: true

    - name: Add Redis repo using key from URL
      deb822_repository:
        name: redis
        types: deb
        uris: "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main"
        components: stable
        signed_by: /usr/share/keyrings/redis-archive-keyring.gpg

    - name: Update APT
      ansible.builtin.apt:
        update_cache: true

    - name: Install Redis
      ansible.builtin.apt:
        name: redis
        state: present

- name: Install Redis on RedHat
  when: ansible_distribution == 'RedHat'
  block:
    - name: Install package
      ansible.builtin.dnf:
        name: redis
        state: present

- name: Enable systemd Redis service
  ansible.builtin.systemd_service:
    name: redis
    enabled: true
    state: stopped
    daemon_reload: true
  when: not kms_fips

- name: Open ports on RHEL
  when: ansible_distribution == 'RedHat'
  block:
    - name: Open port 443 for HTTPS
      ansible.posix.firewalld:
        zone: public
        port: 443/tcp
        permanent: true
        state: enabled

    - name: Always reload firewalld
      ansible.builtin.service:
        name: firewalld
        state: reloaded
