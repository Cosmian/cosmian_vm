---
name: Build and test image for AWS SEV

on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string
      techno:
        required: true
        type: string
      product:
        required: true
        type: string
      kms-version:
        required: true
        type: string
      machine-type:
        required: true
        type: string

env:
  AWS_REGION: eu-west-1

jobs:
  build-image:
    name: Packer build - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: startsWith(github.ref, 'refs/tags/') || contains(inputs.product, 'cosmian-vm')
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ./packer
    outputs:
      timestamp: ${{ steps.env.outputs.TIMESTAMP }}
      image_name: ${{ steps.env.outputs.IMAGE_NAME }}
      ci_instance: ${{ steps.env.outputs.CI_INSTANCE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env variables
        id: env
        run: |
          TIMESTAMP="$(date -u +'%Y%m%d%H%M%S')"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=temp-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"
          echo "CI_INSTANCE=gh-ci-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"

      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: Install packer plugins
        run: |
          packer plugins install github.com/hashicorp/amazon
          packer plugins install github.com/hashicorp/ansible

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Packer build image
        if: startsWith(github.ref, 'refs/tags/') != true
        env:
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
          IMAGE_NAME: ${{ steps.env.outputs.IMAGE_NAME }}
          KMS_VERSION: ${{ inputs.kms-version }}
        run: |
          set -ex
          COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          bash ../.github/scripts/aws-packer-build.sh "${{ inputs.product }}" "${{ inputs.distrib }}" "$COSMIAN_VM_VERSION"

      - name: Packer build image
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
          IMAGE_NAME: ${{ steps.env.outputs.IMAGE_NAME }}
          VERSION: ${{ github.ref_name }}
          KMS_VERSION: ${{ inputs.kms-version }}
        run: |
          set -ex
          COSMIAN_VM_VERSION="$VERSION"
          bash ../.github/scripts/aws-packer-build.sh "${{ inputs.product }}" "${{ inputs.distrib }}" "$COSMIAN_VM_VERSION"

  test-image:
    name: Test image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: startsWith(github.ref, 'refs/tags/') || contains(inputs.product, 'cosmian-vm')
    runs-on: ubuntu-22.04
    needs: build-image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Launch AWS instance
        id: run-aws-instance
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set -ex

          IMAGE_TO_INSTANTIATE=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query 'Images[].ImageId' --output text)

          if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
            aws ec2 create-security-group --group-name ${CI_INSTANCE}-ci-sg --description "Security group for image test"
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
          else
            aws ec2 create-security-group --group-name ${CI_INSTANCE}-ci-sg --description "Security group for image test"
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 443 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 8080 --cidr 0.0.0.0/0
          fi

          timeout 40m bash -c "until
          aws ec2 run-instances \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=$CI_INSTANCE}]' \
          --image-id ${IMAGE_TO_INSTANTIATE} \
          --instance-type ${{ inputs.machine-type }} \
          --cpu-options AmdSevSnp=enabled \
          --security-groups ${CI_INSTANCE}-ci-sg; do sleep 60; done"

          IP_ADDR=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "IP_ADDR=${IP_ADDR}" >> "$GITHUB_OUTPUT"

          # Wait for VM to be ready
          export CI_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[].Instances[].[InstanceId]' --output text)
          timeout 30m bash -c "until aws ec2 describe-instance-status --instance-ids $CI_INSTANCE_ID --query 'InstanceStatuses[].InstanceStatus[].Status[]' --output text | grep -q ok; do sleep 60; done"

      - name: Download Cosmian VM CLI
        if: startsWith(github.ref, 'refs/tags/') != true
        run: |
          export BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          wget https://package.cosmian.com/cosmian_vm/last_build/$BRANCH/cosmian_vm

      - name: Download Cosmian VM CLI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          wget https://package.cosmian.com/cosmian_vm/$VERSION/cosmian_vm

      - name: Change permissions of binaries
        run: |
          set -e
          chmod +x ./cosmian_vm

      - name: Test Cosmian VM Agent on AWS instance
        id: test_cosmian_vm
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
          IP_ADDR: ${{ steps.run-aws-instance.outputs.IP_ADDR }}
        run: |
          set -ex
          bash .github/scripts/aws-${{ inputs.product }}-tests.sh "$CI_INSTANCE" "$IP_ADDR" "$AWS_REGION"

      - name: Terminate AWS instance
        if: success() || failure() || cancelled()
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set -x
          set +e
          export CI_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[].Instances[].[InstanceId]' --output text)
          export IMAGE_TO_DELETE=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query 'Images[].ImageId' --output text)
          export SNAPSHOT_ID=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query 'Images[].BlockDeviceMappings[].Ebs[].SnapshotId[]' --output text)

          aws ec2 terminate-instances --instance-ids $CI_INSTANCE_ID
          timeout 10m bash -c "until aws ec2 describe-instances --instance-ids $CI_INSTANCE_ID --query 'Reservations[].Instances[].State[].Name[]' --output text | grep -q terminated; do sleep 60; done"
          aws ec2 delete-security-group --group-name ${CI_INSTANCE}-ci-sg
          aws ec2 deregister-image --image-id $IMAGE_TO_DELETE
          aws ec2 delete-snapshot --snapshot-id $SNAPSHOT_ID

  test-ansible:
    name: Test Ansible - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: startsWith(github.ref, 'refs/tags/') != true && contains(inputs.product, 'cosmian-vm')
    runs-on: ubuntu-22.04
    needs: test-image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Create env variables
        id: env
        run: |
          TIMESTAMP="$(date -u +'%Y%m%d%H%M%S')"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "CI_INSTANCE=gh-ci-ansible-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS auth
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Launch AWS instance
        id: run-aws-instance
        env:
          CI_INSTANCE: ${{ steps.env.outputs.ci_instance }}
          SSH_KEY: ${{ secrets.PACKER_AWS_SSH_PRIVATE_KEY }}
        run: |
          set -ex

          echo "$SSH_KEY" > $HOME/packer.pem
          chmod 400 $HOME/packer.pem

          if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
            aws ec2 create-security-group --group-name ${CI_INSTANCE}-ansible-sg --description "Security group for ansible test"
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ansible-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ansible-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
          else
            aws ec2 create-security-group --group-name ${CI_INSTANCE}-ansible-sg --description "Security group for ansible test"
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ansible-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ansible-sg --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ansible-sg --protocol tcp --port 443 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ansible-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ansible-sg --protocol tcp --port 8080 --cidr 0.0.0.0/0
          fi

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            IMAGE_TO_INSTANTIATE="ami-083360161b7e953b6"
          else
            IMAGE_TO_INSTANTIATE="ami-02d912d1649d1e091"
          fi

          aws ec2 run-instances \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=${{env.CI_INSTANCE}}}]' \
          --image-id $IMAGE_TO_INSTANTIATE \
          --instance-type ${{ inputs.machine-type }} \
          --cpu-options AmdSevSnp=enabled \
          --key-name packer \
          --security-groups ${CI_INSTANCE}-ansible-sg

          IP_ADDR=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "IP_ADDR=${IP_ADDR}" >> "$GITHUB_OUTPUT"

          # Wait for VM to be ready
          export CI_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[].Instances[].[InstanceId]' --output text)
          timeout 40m bash -c "until aws ec2 describe-instance-status --instance-ids $CI_INSTANCE_ID --query 'InstanceStatuses[].InstanceStatus[].Status[]' --output text | grep -q ok; do sleep 60; done"

      - name: Ansible installation
        env:
          IP_ADDR: ${{ steps.run-aws-instance.outputs.IP_ADDR }}
        run: |
          set -ex
          cd ansible
          python3 -m pip install -r python_modules.txt

          COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            SSH_USER="ubuntu"
          else
            SSH_USER="ec2-user"
          fi

          export ANSIBLE_HOST_KEY_CHECKING=False
          for i in {1..2}
          do
            echo "Iteration: $i"
            ansible-playbook ${{ inputs.product }}-playbook.yml -i ${IP_ADDR}, -u $SSH_USER --private-key="$HOME/packer.pem" -e cosmian_vm_version=$COSMIAN_VM_VERSION -e cosmian_kms_version=${{ inputs.kms-version }}
          done

      - name: Stop and delete AWS instance
        if: success() || failure() || cancelled()
        env:
          CI_INSTANCE: ${{ steps.env.outputs.ci_instance }}
        run: |
          set -x
          set +e
          export CI_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[].Instances[].[InstanceId]' --output text)
          aws ec2 terminate-instances --instance-ids $CI_INSTANCE_ID
          timeout 10m bash -c "until aws ec2 describe-instances --instance-ids $CI_INSTANCE_ID --query 'Reservations[].Instances[].State[].Name[]' --output text | grep -q terminated; do sleep 60; done"
          aws ec2 delete-security-group --group-name ${CI_INSTANCE}-ansible-sg
