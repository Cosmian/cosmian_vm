---
name: Build and test image for AWS SEV

on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string
      techno:
        required: true
        type: string
      product:
        required: true
        type: string
      kms-version:
        required: true
        type: string
      ai-runner-version:
        required: true
        type: string
      base-version:
        required: true
        type: string

env:
  RUST_LOG: cosmian_vm=trace

jobs:
  build-image:
    name: Packer build - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ./packer
    outputs:
      timestamp: ${{ steps.env.outputs.TIMESTAMP }}
      image_name: ${{ steps.env.outputs.IMAGE_NAME }}
      ci_instance: ${{ steps.env.outputs.CI_INSTANCE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env variables
        id: env
        run: |
          TIMESTAMP="$(date -u +'%Y%m%d%H%M%S')"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=temp-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"
          echo "CI_INSTANCE=gh-ci-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"

      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Packer build image
        env:
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
          IMAGE_NAME: ${{ steps.env.outputs.IMAGE_NAME }}
          KMS_VERSION: ${{ inputs.kms-version }}
          AI_RUNNER_VERSION: ${{ inputs.ai-runner-version }}
          VERSION: ${{ inputs.base-version }}
        run: |
          set -ex

          BASE_VERSION=$(echo $VERSION | sed 's/\./-/g; s/_/-/g; s/+/-/g')

          if [[ ${GITHUB_REF} = *'refs/tags/'* ]]; then
            export COSMIAN_VM_VERSION="${{ github.ref_name }}"
          else
            export COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          fi

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            export AMI=$(aws ec2 describe-images --filters "Name=name,Values=base-image-${BASE_VERSION}-ubuntu-sev" --query "Images[*].{ID:ImageId}" --output text)
          else
            export AMI=$(aws ec2 describe-images --filters "Name=name,Values=base-image-${BASE_VERSION}-rhel-sev" --query "Images[*].{ID:ImageId}" --output text)
          fi
          bash ../.github/scripts/aws-packer-build.sh "${{ inputs.product }}" "${{ inputs.distrib }}" "$AMI"

  test-image:
    name: Test image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    runs-on: ubuntu-22.04
    needs: build-image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Launch AWS instance
        id: run-aws-instance
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set -ex

          IMAGE_TO_INSTANTIATE=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query 'Images[].ImageId' --output text)

          aws ec2 create-security-group --group-name ${CI_INSTANCE}-ci-sg --description "Security group for image test"
          aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
          aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
          if [ "${{ inputs.product }}" = "kms" ]; then
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 443 --cidr 0.0.0.0/0
          elif [ "${{ inputs.product }}" = "ai-runner" ]; then
            aws ec2 authorize-security-group-ingress --group-name ${CI_INSTANCE}-ci-sg --protocol tcp --port 443 --cidr 0.0.0.0/0
          fi

          AMI=$(aws ec2 run-instances \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$CI_INSTANCE}]" \
            --image-id ${IMAGE_TO_INSTANTIATE} \
            --instance-type c6a.2xlarge \
            --cpu-options AmdSevSnp=enabled \
            --block-device-mappings "DeviceName=/dev/sda1,Ebs={VolumeType=gp3,VolumeSize=20}" \
            --key-name packer \
            --security-groups ${CI_INSTANCE}-ci-sg \
            --metadata-options "InstanceMetadataTags=enabled, HttpTokens=optional, HttpEndpoint=enabled, HttpPutResponseHopLimit=2" \
            --region eu-west-1 \
            --placement AvailabilityZone=eu-west-1c \
            --query 'Instances[0].InstanceId' --output text)

          IP_ADDR=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "IP_ADDR=${IP_ADDR}" >> "$GITHUB_OUTPUT"

          set +e
          # Wait for VM to be ready
          aws ec2 wait instance-status-ok --instance-ids $AMI
          RET=$?

          set -e
          if [ "$RET" -ne 0 ]; then
            aws ec2 stop-instances --instance-ids $AMI
            aws ec2 wait instance-stopped --instance-ids $AMI
            aws ec2 terminate-instances --instance-ids $AMI
            aws ec2 wait instance-terminated --instance-ids $AMI

            AMI=$(aws ec2 run-instances \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$CI_INSTANCE}]" \
              --image-id ${IMAGE_TO_INSTANTIATE} \
              --instance-type c6a.2xlarge \
              --cpu-options AmdSevSnp=enabled \
              --block-device-mappings "DeviceName=/dev/sda1,Ebs={VolumeType=gp3,VolumeSize=20}" \
              --key-name packer \
              --security-groups ${CI_INSTANCE}-ci-sg \
              --metadata-options "InstanceMetadataTags=enabled, HttpTokens=optional, HttpEndpoint=enabled, HttpPutResponseHopLimit=2" \
              --region eu-west-1 \
              --placement AvailabilityZone=eu-west-1c \
              --query 'Instances[0].InstanceId' --output text)

            IP_ADDR=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "IP_ADDR=${IP_ADDR}" >> "$GITHUB_OUTPUT"

            # Wait for VM to be ready
            aws ec2 wait instance-status-ok --instance-ids $AMI
          fi

          timeout 20m bash -c "until nc -z $IP_ADDR 22; do sleep 60; done"

      - name: Check Cosmian VM
        env:
          IP_ADDR: ${{ steps.run-aws-instance.outputs.IP_ADDR }}
          SSH_KEY: ${{ secrets.PACKER_AWS_SSH_PRIVATE_KEY }}
        run: |
          set -ex

          if [[ ${GITHUB_REF} = *'refs/tags/'* ]]; then
            COSMIAN_VM_VERSION="${{ github.ref_name }}"
          else
            COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          fi

          echo "$SSH_KEY" > $HOME/packer.pem
          chmod 400 $HOME/packer.pem

          cd ansible
          python3 -m pip install -r python_modules.txt

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            SSH_USER="ubuntu"
          else
            SSH_USER="ec2-user"
          fi

          export ANSIBLE_HOST_KEY_CHECKING=False
          # Ansible script
          ansible-playbook ${{ inputs.product }}-playbook.yml -i ${IP_ADDR}, -u $SSH_USER --private-key="$HOME/packer.pem" -e cosmian_vm_version=$COSMIAN_VM_VERSION -e cosmian_kms_version=${{ inputs.kms-version }} -e cosmian_ai_runner_version=${{ inputs.ai-runner-version }} --tags check-${{ inputs.product }} -e '{ "check_app_test_reboot": false, "check_cosmian_vm_test_reboot": false }'

      - name: Terminate AWS instance
        if: success() || cancelled()
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set -x
          set +e
          export CI_INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${CI_INSTANCE}" --query 'Reservations[].Instances[].[InstanceId]' --output text)

          aws ec2 terminate-instances --instance-ids $CI_INSTANCE_ID

      - name: Delete AWS image
        if: (success() || failure() || cancelled()) && startsWith(github.ref, 'refs/tags') != true
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set -x
          set +e
          export IMAGE_TO_DELETE=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query 'Images[].ImageId' --output text)
          export SNAPSHOT_ID=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query 'Images[].BlockDeviceMappings[].Ebs[].SnapshotId[]' --output text)

          aws ec2 deregister-image --image-id $IMAGE_TO_DELETE
          aws ec2 delete-snapshot --snapshot-id $SNAPSHOT_ID

  release-image:
    name: Release image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-22.04
    needs: [build-image, test-image]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Copy image to public project
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          TAG: ${{ github.ref_name }}
          KMS: ${{ inputs.kms-version }}
          AI_RUNNER: ${{ inputs.ai-runner-version }}
        run: |
          set -ex

          VERSION=$(echo $TAG | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          KMS_VERSION=$(echo $KMS | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          AI_RUNNER_VERSION=$(echo $AI_RUNNER | sed 's/\./-/g; s/_/-/g; s/+/-/g')

          if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
            NEW_IMAGE_NAME=cosmian-vm-$VERSION-${{ inputs.techno }}-${{ inputs.distrib }}
          elif [ "${{ inputs.product }}" = "ai-runner" ]; then
            NEW_IMAGE_NAME=cosmian-vm-${VERSION}-ai-runner-${AI_RUNNER_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
          else
            NEW_IMAGE_NAME=cosmian-vm-${VERSION}-kms-${KMS_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
          fi

          AMI=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query 'Images[].ImageId' --output text)

          aws ec2 copy-image \
            --name $NEW_IMAGE_NAME \
            --source-region eu-west-1 \
            --source-image-id ${AMI}
