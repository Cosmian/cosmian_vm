---
name: Build Cosmian VM binaries

on: workflow_call

jobs:
  check:
    name: Rust Check
    runs-on: ubuntu-22.04

    steps:
      - name: Install dependencies
        run: |
          sudo curl -fsSLo /usr/share/keyrings/intel-sgx-deb.asc https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/intel-sgx-deb.asc] https://download.01.org/intel-sgx/sgx_repo/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/intel-sgx.list
          sudo apt-get update && sudo apt-get install -y tpm2-tools libtss2-dev libtdx-attest-dev

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache dependencies
        id: cargo-cache
        uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain and components
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cargo install cargo-machete
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo install cargo-machete

      - name: Cargo fmt
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo fmt --all -- --check

      - name: Cargo check
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo check

      - name: Clippy
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo clippy -- -D warnings

      - name: Machete (deps checker)
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo machete

  test:
    name: Rust Test
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo curl -fsSLo /usr/share/keyrings/intel-sgx-deb.asc https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/intel-sgx-deb.asc] https://download.01.org/intel-sgx/sgx_repo/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/intel-sgx.list
          sudo apt-get update && sudo apt-get install -y tpm2-tools libtss2-dev libtdx-attest-dev
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache dependencies
        id: cargo-cache
        uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain and components
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cargo test
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo test

  build:
    name: Rust Build
    runs-on: ubuntu-22.04

    steps:
      - name: Install dependencies
        run: |
          sudo curl -fsSLo /usr/share/keyrings/intel-sgx-deb.asc https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/intel-sgx-deb.asc] https://download.01.org/intel-sgx/sgx_repo/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/intel-sgx.list
          sudo apt-get update && sudo apt-get install -y tpm2-tools libtss2-dev libtdx-attest-dev
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache dependencies
        id: cargo-cache
        uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain and components
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cargo build
        run: cargo build --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cosmian_vm
          path: |
            CHANGELOG.md
            target/release/cosmian_vm_agent
            target/release/cosmian_vm
            target/release/cosmian_certtool
          retention-days: 10
          if-no-files-found: error

  push:
    needs: build
    name: package.cosmian.com
    runs-on: [self-hosted, no-tee]
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: cosmian_vm

      - name: Push latest build to package.cosmian.com
        run: |
          set -x
          export BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          DESTINATION_DIR=/mnt/package/cosmian_vm/last_build/${BRANCH}
          ssh cosmian@package.cosmian.com mkdir -p $DESTINATION_DIR
          scp target/release/cosmian_vm_agent target/release/cosmian_vm target/release/cosmian_certtool cosmian@package.cosmian.com:$DESTINATION_DIR/

      - name: Push version tag to package.cosmian.com
        if: startsWith(github.ref, 'refs/tags/')
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          set -x
          DESTINATION_DIR=/mnt/package/cosmian_vm/$VERSION
          ssh cosmian@package.cosmian.com mkdir -p $DESTINATION_DIR
          scp target/release/cosmian_vm_agent target/release/cosmian_vm target/release/cosmian_certtool cosmian@package.cosmian.com:$DESTINATION_DIR/

  cargo-deny:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1

  ansible-lint:
    name: Ansible Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ansible
    steps:
      - uses: actions/checkout@v3
      - name: Install ansible prerequisites
        run: |
          python3 -m pip install -r python_modules.txt
          python3 -m pip install ansible-lint

      - name: Run ansible-lint
        run: ansible-lint
