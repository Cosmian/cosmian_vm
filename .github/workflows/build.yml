---
on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string

jobs:
  check:
    name: (${{ inputs.distrib }}) Rust Check
    runs-on: ${{ inputs.distrib }}

    steps:
      - name: Install dependencies
        run: |
          sudo curl -fsSLo /usr/share/keyrings/intel-sgx-deb.asc https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/intel-sgx-deb.asc] https://download.01.org/intel-sgx/sgx_repo/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/intel-sgx.list
          sudo apt-get update && sudo apt-get install -y tpm2-tools libtss2-dev libtdx-attest-dev

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache dependencies
        id: cargo-cache
        uses: Swatinem/rust-cache@v2

      - name: Install Rust toolchain and components
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cargo install cargo-machete
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo install cargo-machete

      - name: Cargo fmt
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo fmt --all -- --check

      - name: Cargo check
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo check

      - name: Clippy
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo clippy -- -D warnings

      - name: Machete (deps checker)
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo machete

      - name: Cargo test
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo test

      - name: Cargo build
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: cargo build --release

      - name: Build Debian and RPM packages
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-deb cargo-generate-rpm
          if [[ ${{ inputs.distrib }} = *'22'* ]]; then
            cargo deb -p cosmian_vm --variant ubuntu-22
            cargo deb -p cosmian_vm_agent --variant ubuntu-22
            cargo generate-rpm -p crate/cli
            cargo generate-rpm -p crate/agent --metadata-overwrite=pkg/rpm/scriptlets.toml
          else
            cargo deb -p cosmian_vm --variant ubuntu-24
            cargo deb -p cosmian_vm_agent --variant ubuntu-24
          fi

      - name: Upload artifacts
        if: steps.cargo-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cosmian_vm_${{ inputs.distrib }}
          path: |
            CHANGELOG.md
            target/generate-rpm/cosmian_vm_agent-*
            target/generate-rpm/cosmian_vm-*
            target/debian/cosmian-vm-agent-ubuntu-*
            target/debian/cosmian-vm-ubuntu-*
          retention-days: 10
          if-no-files-found: error

  push:
    needs: check
    name: (${{ inputs.distrib }}) package.cosmian.com
    runs-on: [self-hosted, no-tee]
    container:
      image: cosmian/docker_doc_ci
      volumes:
        - /home/cosmian/.ssh/id_rsa:/root/.ssh/id_rsa
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: cosmian_vm_${{ inputs.distrib }}

      - name: Push latest build to package.cosmian.com
        run: |
          set -x
          if [[ ${GITHUB_REF} = *'refs/tags/'* ]]; then
            export BRANCH="${{ github.ref_name }}"
          else
            export BRANCH="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          fi

          DESTINATION_DIR=/mnt/package/cosmian_vm/${BRANCH}
          ssh -o 'StrictHostKeyChecking no' -i /root/.ssh/id_rsa cosmian@package.cosmian.com mkdir -p $DESTINATION_DIR

          if [[ ${{ inputs.distrib }} = *'22'* ]]; then
            scp -o 'StrictHostKeyChecking no' -i /root/.ssh/id_rsa \
              target/generate-rpm/cosmian_vm* \
              target/generate-rpm/cosmian_vm_agent* \
              target/debian/cosmian-vm-agent-ubuntu-* \
              target/debian/cosmian-vm-ubuntu-* \
              cosmian@package.cosmian.com:$DESTINATION_DIR/
          else
            scp -o 'StrictHostKeyChecking no' -i /root/.ssh/id_rsa \
              target/debian/cosmian-vm-agent-ubuntu-* \
              target/debian/cosmian-vm-ubuntu-* \
              cosmian@package.cosmian.com:$DESTINATION_DIR/
          fi
