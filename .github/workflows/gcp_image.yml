---
name: Build and test image for GCP SEV and TDX

on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string
      machine-type:
        required: true
        type: string
      zone:
        required: true
        type: string
      confidential-compute-type:
        required: true
        type: string
      techno:
        required: true
        type: string
      min-cpu-platform:
        required: true
        type: string
      project:
        required: true
        type: string
      mode:
        required: true
        type: string
      maintenance:
        required: true
        type: string

env:
  GCP_DEV_PROJECT: cosmian-dev
  GCP_PUBLIC_PROJECT: cosmian-public

jobs:
  build-image:
    name: Packer build
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    outputs:
      timestamp: ${{ steps.env.outputs.TIMESTAMP }}
      image_name: ${{ steps.env.outputs.IMAGE_NAME }}
      ci_instance: ${{ steps.env.outputs.CI_INSTANCE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env variables
        id: env
        run: |
          TIMESTAMP="$(date -u +'%Y%m%d%H%M%S')"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=temp-$TIMESTAMP-cosmian-vm-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"
          echo "CI_INSTANCE=gh-ci-$TIMESTAMP-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: cosmian_vm

      - name: Change permissions of binaries
        run: |
          chmod +x target/release/cosmian_certtool target/release/cosmian_vm target/release/cosmian_vm_agent

      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: Install packer plugins
        run: |
          cd packer/
          packer plugins install github.com/hashicorp/googlecompute
          packer plugins install github.com/hashicorp/ansible

      - name: Init packer
        run: |
          cd packer/ && packer init gcp-${{ inputs.techno }}-${{ inputs.distrib }}.pkr.hcl

      - name: GCP auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Packer build image
        id: packer-build
        env:
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
        run: |
          cd packer/ && packer build -var "prefix=temp-$TIMESTAMP" gcp-${{ inputs.techno }}-${{ inputs.distrib }}.pkr.hcl

  test-image:
    name: Test image
    runs-on: ubuntu-22.04
    needs: build-image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: GCP auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest
          install_components: ${{ inputs.mode }}

      - name: Launch GCP instance
        id: run-gcp-instance
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          gcloud ${{ inputs.mode }} compute instances create $CI_INSTANCE \
            --machine-type ${{ inputs.machine-type }} \
            --zone ${{ inputs.zone }} \
            --min-cpu-platform="${{ inputs.min-cpu-platform }}" \
            --confidential-compute-type=${{ inputs.confidential-compute-type }} \
            --${{ inputs.maintenance }} \
            --image="$IMAGE_NAME" \
            --image-project=${{ inputs.project }} \
            --project ${{ inputs.project }} \
            --tags ssh-full,backend-rust-full,http-server,https-server,cosmian-vm-agent \
            --metadata-from-file=startup-script=resources/scripts/gcp-start-script.sh \
            --max-run-duration=10m \
            --instance-termination-action=DELETE

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: cosmian_vm

      - name: Change permissions of binaries
        run: |
          chmod +x target/release/cosmian_certtool target/release/cosmian_vm target/release/cosmian_vm_agent

      - name: Test Cosmian VM Agent on GCP instance
        id: test_cosmian_vm
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          sudo apt-get install -y jq moreutils
          IP_ADDR=$(gcloud ${{ inputs.mode }} compute instances describe $CI_INSTANCE --format='get(networkInterfaces[0].accessConfigs[0].natIP)' --zone=${{ inputs.zone }})
          echo "Waiting for Cosmian VM agent (${IP_ADDR}:5355)..."
          timeout 10m bash -c "until curl --insecure --output /dev/null --silent --fail https://${IP_ADDR}:5355/ima/ascii; do sleep 3; done"

          echo "[ OK ] Cosmian VM ready"
          ./target/release/cosmian_vm --url https://${IP_ADDR}:5355 --allow-insecure-tls snapshot
          ./target/release/cosmian_vm --url https://${IP_ADDR}:5355 --allow-insecure-tls verify --snapshot cosmian_vm.snapshot

          echo "Rebooting instance..."
          gcloud ${{ inputs.mode }} compute instances stop $CI_INSTANCE --zone ${{ inputs.zone }} --project $GCP_DEV_PROJECT
          gcloud ${{ inputs.mode }} compute instances set-scheduling $CI_INSTANCE --zone ${{ inputs.zone }} --max-run-duration=10m --instance-termination-action=DELETE
          sleep 10
          gcloud ${{ inputs.mode }} compute instances start $CI_INSTANCE --zone ${{ inputs.zone }} --project $GCP_DEV_PROJECT
          IP_ADDR=$(gcloud ${{ inputs.mode }} compute instances describe $CI_INSTANCE --format='get(networkInterfaces[0].accessConfigs[0].natIP)' --zone=${{ inputs.zone }})
          timeout 10m bash -c "until curl --insecure --output /dev/null --silent --fail https://${IP_ADDR}:5355/ima/ascii; do sleep 3; done"

          echo "[ OK ] Cosmian VM ready after reboot"
          RESET_COUNT=$(cat cosmian_vm.snapshot | jq '.tpm_policy.reset_count')
          NEW_RESET_COUNT=$(expr $RESET_COUNT + 1)
          jq --arg NEW_RESET_COUNT "$NEW_RESET_COUNT" '.tpm_policy.reset_count = $NEW_RESET_COUNT' cosmian_vm.snapshot > new_cosmian_vm.snapshot
          jq '.tpm_policy.reset_count |= tonumber' new_cosmian_vm.snapshot | sponge new_cosmian_vm.snapshot

          ./target/release/cosmian_vm --url https://${IP_ADDR}:5355 --allow-insecure-tls verify --snapshot new_cosmian_vm.snapshot
          echo "[ OK ] Integrity after reboot"

          echo "IP_ADDR=$IP_ADDR" >> "$GITHUB_OUTPUT"

      - name: Stop and delete GCP instance
        if: success()
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set +e
          gcloud ${{ inputs.mode }} compute instances delete --quiet $CI_INSTANCE --zone ${{ inputs.zone }} --project ${{ inputs.project }}
          set -e

      - name: Delete GCP CI image
        if: startsWith(github.ref, 'refs/tags') != true
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
        run: |
          gcloud ${{ inputs.mode }} compute images delete --quiet $IMAGE_NAME

  release-image:
    name: Release image
    runs-on: ubuntu-22.04
    needs: [build-image, test-image]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: GCP auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Copy image to public project
        if: startsWith(github.ref, 'refs/tags')
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
        run: |
          TAG=${{  github.ref_name }}
          VERSION=$(echo $TAG | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          NEW_IMAGE_NAME=cosmian-vm-$VERSION-sev-${{ inputs.distrib }}
          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            LICENSE="${{ secrets.GCP_COSMIAN_VM_UBUNTU_LICENCE }}"
          else
            LICENSE=${{ secrets.GCP_COSMIAN_VM_RHEL_LICENCE }}
          fi
          gcloud ${{ inputs.mode }} compute --project=$GCP_DEV_PROJECT images create $NEW_IMAGE_NAME \
            --source-image=$IMAGE_NAME \
            --source-image-project=$GCP_DEV_PROJECT

          gcloud ${{ inputs.mode }} compute --project=$GCP_PUBLIC_PROJECT images create $NEW_IMAGE_NAME \
            --source-image=$IMAGE_NAME \
            --source-image-project=$GCP_DEV_PROJECT \
            --licenses=$LICENSE
