---
name: Build and test image for GCP SEV and TDX

on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string
      machine-type:
        required: true
        type: string
      zone:
        required: true
        type: string
      confidential-compute-type:
        required: true
        type: string
      techno:
        required: true
        type: string
      min-cpu-platform:
        required: true
        type: string
      mode:
        required: true
        type: string
      product:
        required: true
        type: string
      kms-version:
        required: true
        type: string
      ai-runner-version:
        required: true
        type: string

env:
  GCP_DEV_PROJECT: cosmian-dev
  GCP_PUBLIC_PROJECT: cosmian-public

jobs:
  build-image:
    name: Packer build - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: contains(inputs.product, 'ai-runner') != true || contains(inputs.distrib, 'rhel') != true
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ./packer
    outputs:
      timestamp: ${{ steps.env.outputs.TIMESTAMP }}
      image_name: ${{ steps.env.outputs.IMAGE_NAME }}
      ci_instance: ${{ steps.env.outputs.CI_INSTANCE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env variables
        id: env
        run: |
          TIMESTAMP="$(date -u +'%Y%m%d%H%M%S')"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=temp-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"
          echo "CI_INSTANCE=gh-ci-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"

      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: Install packer plugins
        run: |
          packer plugins install github.com/hashicorp/googlecompute
          packer plugins install github.com/hashicorp/ansible

      - name: GCP auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Packer build image
        env:
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
          IMAGE_NAME: ${{ steps.env.outputs.IMAGE_NAME }}
          KMS_VERSION: ${{ inputs.kms-version }}
          AI_RUNNER_VERSION: ${{ inputs.ai-runner-version }}
          TECHNO: ${{ inputs.techno }}
        run: |
          set -ex
          if [[ ${GITHUB_REF} = *'refs/tags/'* ]]; then
            export COSMIAN_VM_VERSION="${{ github.ref_name }}"
          else
            export COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          fi

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            if [ "${{ inputs.techno }}" = "sev" ]; then
              export AMI="ubuntu-2204-jammy-v20240319"
            else
              export AMI="ubuntu-2204-tdx-v20240220"
            fi
          else
            export AMI="rhel-9-v20240312"
          fi

          bash ../.github/scripts/gcp-packer-build.sh "${{ inputs.product }}" "${{ inputs.distrib }}" "$AMI"

  test-image:
    name: Test image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: contains(inputs.product, 'ai-runner') != true || contains(inputs.distrib, 'rhel') != true
    runs-on: ubuntu-22.04
    needs: build-image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: GCP auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest
          install_components: ${{ inputs.mode }}

      - name: Launch GCP instance
        id: run-gcp-instance
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set -ex
          gcloud ${{ inputs.mode }} compute instances create $CI_INSTANCE \
            --machine-type ${{ inputs.machine-type }} \
            --zone ${{ inputs.zone }} \
            --min-cpu-platform="${{ inputs.min-cpu-platform }}" \
            --confidential-compute-type=${{ inputs.confidential-compute-type }} \
            --shielded-secure-boot \
            --image="$IMAGE_NAME" \
            --image-project=$GCP_DEV_PROJECT \
            --project $GCP_DEV_PROJECT \
            --tags $CI_INSTANCE-fw \
            --maintenance-policy=TERMINATE \
            --max-run-duration=120m \
            --boot-disk-size=20GB \
            --instance-termination-action=DELETE
          IP_ADDR=$(gcloud ${{ inputs.mode }} compute instances describe $CI_INSTANCE --format='get(networkInterfaces[0].accessConfigs[0].natIP)' --zone=${{ inputs.zone }})
          echo "IP_ADDR=${IP_ADDR}" >> "$GITHUB_OUTPUT"

      - name: Create Firewall Rules for CLI Ports
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
            gcloud compute firewall-rules create ${CI_INSTANCE}-allow-ports-cli \
              --network=default \
              --allow=tcp:5555 \
              --target-tags=$CI_INSTANCE-fw
          elif [ "${{ inputs.product }}" = "ai-runner" ]; then
            gcloud compute firewall-rules create ${CI_INSTANCE}-allow-ports-cli \
              --network=default \
              --allow=tcp:5555,tcp:443 \
              --target-tags=$CI_INSTANCE-fw
          else
            gcloud compute firewall-rules create ${CI_INSTANCE}-allow-ports-cli \
              --network=default \
              --allow=tcp:5555,tcp:443 \
              --target-tags=$CI_INSTANCE-fw
          fi

      - name: Download Cosmian VM CLI
        run: |
          set -e
          if [[ ${GITHUB_REF} = *'refs/tags/'* ]]; then
            COSMIAN_VM_VERSION="${{ github.ref_name }}"
          else
            COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          fi
          wget https://package.cosmian.com/cosmian_vm/$COSMIAN_VM_VERSION/cosmian_vm
          chmod +x ./cosmian_vm

      - name: Test Cosmian VM Agent on GCP instance
        id: test_cosmian_vm
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
          IP_ADDR: ${{ steps.run-gcp-instance.outputs.IP_ADDR }}
        run: |
          set -ex
          bash .github/scripts/gcp-${{ inputs.product }}-tests.sh "${{ inputs.mode }}" "$CI_INSTANCE" "${{ inputs.zone }}" "$IP_ADDR"

      - name: Stop and delete GCP instance
        if: success() || failure() || cancelled()
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set +e
          gcloud ${{ inputs.mode }} compute instances delete --quiet $CI_INSTANCE --zone ${{ inputs.zone }} --project $GCP_DEV_PROJECT
          gcloud compute firewall-rules delete ${CI_INSTANCE}-allow-ports-cli --quiet
          set -e

      - name: Delete GCP CI image
        if: startsWith(github.ref, 'refs/tags') != true || failure() || cancelled()
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
        run: |
          gcloud ${{ inputs.mode }} compute images delete --quiet $IMAGE_NAME

  release-image:
    name: Release image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: (contains(inputs.product, 'ai-runner') != true || contains(inputs.distrib, 'rhel') != true) && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-22.04
    needs: [build-image, test-image]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: GCP auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Copy image to public project
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          TAG: ${{ github.ref_name }}
          KMS: ${{ inputs.kms-version }}
          AI_RUNNER: ${{ inputs.ai-runner-version }}
        run: |
          set -ex

          VERSION=$(echo $TAG | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          KMS_VERSION=$(echo $KMS | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          AI_RUNNER_VERSION=$(echo $AI_RUNNER | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          NEW_IMAGE_NAME=cosmian-vm-$VERSION-${{ inputs.techno }}-${{ inputs.distrib }}

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
              LICENSE="${{ secrets.GCP_COSMIAN_VM_UBUNTU_LICENCE }}"
            elif [ "${{ inputs.product }}" = "ai-runner" ]; then
              LICENSE=${{ secrets.GCP_AI_RUNNER_UBUNTU_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-ai-runner-${AI_RUNNER_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            else
              LICENSE=${{ secrets.GCP_KMS_UBUNTU_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-kms-${KMS_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            fi
          else
            if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
              LICENSE="${{ secrets.GCP_COSMIAN_VM_RHEL_LICENCE }}"
            elif [ "${{ inputs.product }}" = "ai-runner" ]; then
              LICENSE=${{ secrets.GCP_AI_RUNNER_RHEL_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-ai-runner-${AI_RUNNER_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            else
              LICENSE=${{ secrets.GCP_KMS_RHEL_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-kms-${KMS_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            fi
          fi

          gcloud ${{ inputs.mode }} compute --project=$GCP_DEV_PROJECT images create $NEW_IMAGE_NAME \
            --source-image=$IMAGE_NAME \
            --source-image-project=$GCP_DEV_PROJECT

          gcloud ${{ inputs.mode }} compute --project=$GCP_PUBLIC_PROJECT images create $NEW_IMAGE_NAME \
            --source-image=$IMAGE_NAME \
            --source-image-project=$GCP_DEV_PROJECT \
            --licenses=$LICENSE
