---
name: Internal build/test image for GCP

on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string
      techno:
        required: true
        type: string
      product:
        required: true
        type: string
      kms-version:
        required: true
        type: string
      ai-runner-version:
        required: true
        type: string
      base-version:
        required: true
        type: string

env:
  GCP_DEV_PROJECT: cosmian-dev
  GCP_PUBLIC_PROJECT: cosmian-public
  RUST_LOG: cosmian_vm=trace

jobs:
  build-image:
    name: Packer build - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ./packer
    outputs:
      timestamp: ${{ steps.env.outputs.TIMESTAMP }}
      image_name: ${{ steps.env.outputs.IMAGE_NAME }}
      ci_instance: ${{ steps.env.outputs.CI_INSTANCE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env variables
        id: env
        run: |
          TIMESTAMP="$(date -u +'%Y%m%d%H%M%S')"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=temp-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"
          echo "CI_INSTANCE=gh-ci-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"

      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: GCP auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Packer build image
        env:
          PACKER_GITHUB_API_TOKEN: ${{ secrets.PACKER_GITHUB_TOKEN }}
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
          IMAGE_NAME: ${{ steps.env.outputs.IMAGE_NAME }}
          KMS_VERSION: ${{ inputs.kms-version }}
          AI_RUNNER_VERSION: ${{ inputs.ai-runner-version }}
          TECHNO: ${{ inputs.techno }}
          VERSION: ${{ inputs.base-version }}
        shell: bash
        run: |
          set -ex

          BASE_VERSION=$(echo $VERSION | sed 's/\./-/g; s/_/-/g; s/+/-/g')

          if [[ "${GITHUB_REF}" =~ 'refs/tags/' ]]; then
            export COSMIAN_VM_VERSION="${{ github.ref_name }}"
          else
            export COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          fi

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            if [ "${{ inputs.techno }}" = "sev" ]; then
              export AMI="base-image-${BASE_VERSION}-ubuntu-sev"
            else
              export AMI="base-image-${BASE_VERSION}-ubuntu-tdx"
            fi
          else
            if [ "${{ inputs.techno }}" = "sev" ]; then
              export AMI="base-image-${BASE_VERSION}-rhel-sev"
            else
              export AMI="base-image-${BASE_VERSION}-rhel-tdx"
            fi
          fi

          bash ../.github/scripts/gcp-packer-build.sh "${{ inputs.product }}" "${{ inputs.distrib }}" "$AMI"

  test-image:
    name: Image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    runs-on: ubuntu-22.04
    needs: build-image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: GCP auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest

      - name: Launch GCP instance
        id: run-gcp-instance
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set -ex

          ssh-keygen -t rsa -b 4096 -C "$CI_INSTANCE@example.com" -f $HOME/.ssh/id_rsa -q -N ""
          PUBKEY=$(cat $HOME/.ssh/id_rsa.pub)

          if [ "${{ inputs.techno }}" = "sev" ]; then
            MACHINE_TYPE="n2d-standard-2"
            ZONE="europe-west4-a"
            CONFIDENTIAL_COMPUTE_TYPE="SEV_SNP"
            MIN_CPU_PLATFORM="AMD Milan"
          else
            MACHINE_TYPE="c3-standard-4"
            ZONE="us-central1-a"
            CONFIDENTIAL_COMPUTE_TYPE="TDX"
            MIN_CPU_PLATFORM="AUTOMATIC"
          fi

          gcloud compute instances create $CI_INSTANCE \
            --machine-type "$MACHINE_TYPE" \
            --zone "$ZONE" \
            --min-cpu-platform="$MIN_CPU_PLATFORM" \
            --confidential-compute-type="$CONFIDENTIAL_COMPUTE_TYPE" \
            --shielded-secure-boot \
            --image="$IMAGE_NAME" \
            --image-project="$GCP_DEV_PROJECT" \
            --project "$GCP_DEV_PROJECT" \
            --tags "$CI_INSTANCE-fw" \
            --maintenance-policy=TERMINATE \
            --max-run-duration=120m \
            --instance-termination-action=DELETE \
            --boot-disk-size=20GB \
            --metadata=ssh-keys="cosmian:$PUBKEY"
          IP_ADDR=$(gcloud compute instances describe $CI_INSTANCE --format='get(networkInterfaces[0].accessConfigs[0].natIP)' --zone=$ZONE)
          echo "IP_ADDR=${IP_ADDR}" >> "$GITHUB_OUTPUT"

          if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
            gcloud compute firewall-rules create ${CI_INSTANCE}-allow-ports-cli \
              --network=default \
              --allow=tcp:22,tcp:5555 \
              --target-tags=$CI_INSTANCE-fw
          else
            gcloud compute firewall-rules create ${CI_INSTANCE}-allow-ports-cli \
              --network=default \
              --allow=tcp:22,tcp:443,tcp:5555 \
              --target-tags=$CI_INSTANCE-fw
          fi

          timeout 20m bash -c "until nc -z $IP_ADDR 22; do sleep 60; done"

      - name: Check Cosmian VM
        env:
          IP_ADDR: ${{ steps.run-gcp-instance.outputs.IP_ADDR }}
        shell: bash
        run: |
          set -ex
          cd ansible
          python3 -m pip install -r python_modules.txt

          if [[ "${GITHUB_REF}" =~ 'refs/tags/' ]]; then
            COSMIAN_VM_VERSION="${{ github.ref_name }}"
          else
            COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          fi

          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook ${{ inputs.product }}-playbook.yml -i ${IP_ADDR}, -u cosmian -e cosmian_vm_version=$COSMIAN_VM_VERSION -e cosmian_kms_version=${{ inputs.kms-version }} -e cosmian_ai_runner_version=${{ inputs.ai-runner-version }} --tags check-${{ inputs.product }}

      - name: Stop and delete GCP instance
        if: success() || cancelled()
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set +e

          if [ "${{ inputs.techno }}" = "sev" ]; then
            ZONE="europe-west4-a"
          else
            ZONE="us-central1-a"
          fi

          gcloud compute instances delete --quiet $CI_INSTANCE --zone "$ZONE" --project $GCP_DEV_PROJECT
          gcloud compute firewall-rules delete ${CI_INSTANCE}-allow-ports-cli --quiet
          set -e

      - name: Delete GCP CI image
        if: (success() || cancelled()) && startsWith(github.ref, 'refs/tags') != true
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
        run: |
          gcloud compute images delete --quiet $IMAGE_NAME

  release-image:
    name: Release image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    if: (success() || failure()) && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-22.04
    needs: [build-image, test-image]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: GCP auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_COSMIAN_DEV_CREDENTIALS }}

      - name: Copy image to public project
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          TAG: ${{ github.ref_name }}
          KMS: ${{ inputs.kms-version }}
          AI_RUNNER: ${{ inputs.ai-runner-version }}
        run: |
          set -ex

          VERSION=$(echo $TAG | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          KMS_VERSION=$(echo $KMS | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          AI_RUNNER_VERSION=$(echo $AI_RUNNER | sed 's/\./-/g; s/_/-/g; s/+/-/g')
          NEW_IMAGE_NAME=cosmian-vm-$VERSION-${{ inputs.techno }}-${{ inputs.distrib }}

          if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
            if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
              LICENSE="${{ secrets.GCP_COSMIAN_VM_UBUNTU_LICENCE }}"
            elif [ "${{ inputs.product }}" = "ai-runner" ]; then
              LICENSE=${{ secrets.GCP_AI_RUNNER_UBUNTU_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-ai-runner-${AI_RUNNER_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            else
              LICENSE=${{ secrets.GCP_KMS_UBUNTU_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-${{ inputs.product }}-${KMS_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            fi
          else
            if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
              LICENSE="${{ secrets.GCP_COSMIAN_VM_RHEL_LICENCE }}"
            elif [ "${{ inputs.product }}" = "ai-runner" ]; then
              LICENSE=${{ secrets.GCP_AI_RUNNER_RHEL_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-ai-runner-${AI_RUNNER_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            else
              LICENSE=${{ secrets.GCP_KMS_RHEL_LICENSE }}
              NEW_IMAGE_NAME=cosmian-vm-${VERSION}-${{ inputs.product }}-${KMS_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
            fi
          fi

          gcloud compute --project=$GCP_DEV_PROJECT images create $NEW_IMAGE_NAME \
            --source-image=$IMAGE_NAME \
            --source-image-project=$GCP_DEV_PROJECT

          gcloud compute --project=$GCP_PUBLIC_PROJECT images create $NEW_IMAGE_NAME \
            --source-image=$IMAGE_NAME \
            --source-image-project=$GCP_DEV_PROJECT \
            --licenses=$LICENSE
