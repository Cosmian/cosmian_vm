---
name: Build and test image for Azure SEV

on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string
      techno:
        required: true
        type: string
      product:
        required: true
        type: string
      kms-version:
        required: true
        type: string

env:
  RESOURCE_GROUP: packer-snp

jobs:
  build-image:
    name: Packer build - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ./packer
    outputs:
      timestamp: ${{ steps.env.outputs.TIMESTAMP }}
      image_name: ${{ steps.env.outputs.IMAGE_NAME }}
      ci_instance: ${{ steps.env.outputs.CI_INSTANCE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create env variables
        id: env
        run: |
          TIMESTAMP="$(date -u +'%Y%m%d%H%M%S')"
          echo "TIMESTAMP=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=temp-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"
          echo "CI_INSTANCE=gh-ci-$TIMESTAMP-${{ inputs.product }}-${{ inputs.distrib }}-${{ inputs.techno }}" >> "$GITHUB_OUTPUT"

      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: Install packer plugins
        run: |
          packer plugins install github.com/hashicorp/azure
          packer plugins install github.com/hashicorp/ansible

      - name: Packer build image
        if: startsWith(github.ref, 'refs/tags/') != true
        env:
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
          IMAGE_NAME: ${{ steps.env.outputs.IMAGE_NAME }}
          KMS_VERSION: ${{ inputs.kms-version }}
          CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          set -ex
          COSMIAN_VM_VERSION="last_build/${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          bash ../.github/scripts/azure_packer_build.sh "${{ inputs.product }}" "${{ inputs.distrib }}" "$COSMIAN_VM_VERSION"

      - name: Packer build image
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TIMESTAMP: ${{ steps.env.outputs.TIMESTAMP }}
          IMAGE_NAME: ${{ steps.env.outputs.IMAGE_NAME }}
          VERSION: ${{ github.ref_name }}
          KMS_VERSION: ${{ inputs.kms-version }}
          CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}"
        run: |
          set -ex
          COSMIAN_VM_VERSION="$VERSION"
          bash ../.github/scripts/azure_packer_build.sh "${{ inputs.product }}" "${{ inputs.distrib }}" "$COSMIAN_VM_VERSION"

  test-image:
    name: Test image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
    runs-on: ubuntu-22.04
    needs: build-image
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Az CLI login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDS_JSON }}

      - name: Launch Azure instance
        uses: azure/CLI@v2
        id: run-azure-instance
        env:
          IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        with:
          inlineScript: >-
            # az config set extension.use_dynamic_install=yes_without_prompt
            nsg_name="network_security_group"
            az network nsg rule create --nsg-name $nsg_name --resource-group $RESOURCE_GROUP \
              --name allow-ports \
              --priority 100 --access Allow --direction Inbound --protocol Tcp \
              --source-address-prefix '*' --source-port-range '*' \
              --destination-address-prefix '*' --destination-port-ranges 443 5355 8080 \
              --description "Allow inbound traffic on ports 443, 5355, and 8080"
            az vm create -g $RESOURCE_GROUP \
              -n $CI_INSTANCE \
              --image /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Compute/galleries/cosmian_packer/images/ubuntu-cvm
            \
              --security-type ConfidentialVM \
              --os-disk-security-encryption-type VMGuestStateOnly \
              --size Standard_DC2ads_v5 \
              --enable-vtpm true \
              --enable-secure-boot true \
              --nsg $nsg_name
            IP_ADDR=$(az vm show -d -g $RESOURCE_GROUP -n $CI_INSTANCE --query publicIps -o tsv)
            echo "IP_ADDR=${IP_ADDR}" >> "$GITHUB_OUTPUT"

      - name: Download Cosmian VM CLI
        if: startsWith(github.ref, 'refs/tags/') != true
        run: |
          export BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          wget https://package.cosmian.com/cosmian_vm/last_build/$BRANCH/cosmian_vm

      - name: Download Cosmian VM CLI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          wget https://package.cosmian.com/cosmian_vm/$VERSION/cosmian_vm

      - name: Change permissions of binaries
        run: |
          set -e
          chmod +x ./cosmian_vm

      - name: Test Cosmian VM Agent on Azure instance
        id: test_cosmian_vm
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
          IP_ADDR: ${{ steps.run-azure-instance.outputs.IP_ADDR }}
        run: |
          set -ex
          bash .github/scripts/azure-${{ inputs.product }}-tests.sh "$CI_INSTANCE" "$IP_ADDR"

      - name: Stop and delete Azure instance
        if: success()
        env:
          CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
        run: |
          set +e
          az vm delete -g $RESOURCE_GROUP -n $CI_INSTANCE --yes

  # release-image:
  #   name: Release image - ${{ inputs.distrib }} - ${{ inputs.techno }} - ${{ inputs.product }}
  #   if: startsWith(github.ref, 'refs/tags')
  #   runs-on: ubuntu-22.04
  #   needs: [build-image, test-image]
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Az CLI login
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDS_JSON }}

  #     - name: Copy image to public project
  #       env:
  #         CI_INSTANCE: ${{ needs.build-image.outputs.ci_instance }}
  #         IMAGE_NAME: ${{ needs.build-image.outputs.image_name }}
  #         TAG: ${{ github.ref_name }}
  #         KMS: ${{ inputs.kms-version }}
  #       run: |
  #         set -ex

  #         VERSION=$(echo $TAG | sed 's/\./-/g; s/_/-/g; s/+/-/g')
  #         KMS_VERSION=$(echo $KMS | sed 's/\./-/g; s/_/-/g; s/+/-/g')
  #         NEW_IMAGE_NAME=cosmian-vm-$VERSION-${{ inputs.techno }}-${{ inputs.distrib }}

  #         if [ "${{ inputs.distrib }}" = "ubuntu" ]; then
  #           if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
  #             LICENSE="${{ secrets.GCP_COSMIAN_VM_UBUNTU_LICENCE }}"
  #           else
  #             LICENSE=${{ secrets.GCP_KMS_UBUNTU_LICENSE }}
  #             NEW_IMAGE_NAME=cosmian-vm-${VERSION}-kms-${KMS_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
  #           fi
  #         else
  #           if [ "${{ inputs.product }}" = "cosmian-vm" ]; then
  #             LICENSE="${{ secrets.GCP_COSMIAN_VM_RHEL_LICENCE }}"
  #           else
  #             LICENSE=${{ secrets.GCP_KMS_RHEL_LICENSE }}
  #             NEW_IMAGE_NAME=cosmian-vm-${VERSION}-kms-${KMS_VERSION}-${{ inputs.techno }}-${{ inputs.distrib }}
  #           fi
  #         fi

  #         # TODO: publish if needed
